package build.templates.maven;

import java.io.IOException;
import com.fizzed.rocker.ForIterator;
import com.fizzed.rocker.RenderingException;
import com.fizzed.rocker.RockerContent;
import com.fizzed.rocker.RockerOutput;
import com.fizzed.rocker.runtime.DefaultRockerTemplate;
import com.fizzed.rocker.runtime.PlainTextUnloadedClassLoader;
// import @ [1:1]
import io.ktor.generator.core.Project;
// import @ [2:1]
import io.ktor.generator.core.features.KtorFeature;
// import @ [3:1]
import io.ktor.generator.core.features.FeatureInstallReceipt;
// import @ [4:1]
import io.ktor.generator.core.features.Features;

/*
 * Auto generated code to render template build/templates/maven/pomXml.rocker.raw
 * Do not edit this file. Changes will eventually be overwritten by Rocker parser!
 */
@SuppressWarnings("unused")
public class pomXml extends com.fizzed.rocker.runtime.DefaultRockerModel {

    static public com.fizzed.rocker.ContentType getContentType() { return com.fizzed.rocker.ContentType.RAW; }
    static public String getTemplateName() { return "pomXml.rocker.raw"; }
    static public String getTemplatePackageName() { return "build.templates.maven"; }
    static public String getHeaderHash() { return "1178576215"; }
    static public String[] getArgumentNames() { return new String[] { "project", "features" }; }

    // argument @ [6:2]
    private Project project;
    // argument @ [6:2]
    private Features features;

    public pomXml project(Project project) {
        this.project = project;
        return this;
    }

    public Project project() {
        return this.project;
    }

    public pomXml features(Features features) {
        this.features = features;
        return this;
    }

    public Features features() {
        return this.features;
    }

    static public pomXml template(Project project, Features features) {
        return new pomXml()
            .project(project)
            .features(features);
    }

    @Override
    protected DefaultRockerTemplate buildTemplate() throws RenderingException {
        // optimized for performance (via rocker.optimize flag; no auto reloading)
        return new Template(this);
    }

    static public class Template extends com.fizzed.rocker.runtime.DefaultRockerTemplate {

        // <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>
        static private final byte[] PLAIN_TEXT_0_0;
        // </groupId>\n    <artifactId>
        static private final byte[] PLAIN_TEXT_1_0;
        // </artifactId>\n    <version>0.0.1</version>\n    <name>
        static private final byte[] PLAIN_TEXT_2_0;
        // </name>\n    <description>
        static private final byte[] PLAIN_TEXT_3_0;
        // </description>\n    <properties>\n        <ktor_version>
        static private final byte[] PLAIN_TEXT_4_0;
        // </ktor_version>\n        <kotlin.code.style>official</kotlin.code.style>\n        <kotlin_version>
        static private final byte[] PLAIN_TEXT_5_0;
        // </kotlin_version>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <kotlin.compiler.incremental>true</kotlin.compiler.incremental>\n        <main.class>
        static private final byte[] PLAIN_TEXT_6_0;
        // </main.class>\n    </properties>\n    <repositories>\n
        static private final byte[] PLAIN_TEXT_7_0;
        //         <repository>\n            <id>
        static private final byte[] PLAIN_TEXT_8_0;
        // </id>\n            <url>
        static private final byte[] PLAIN_TEXT_9_0;
        // </url>\n            <releases>\n                <enabled>true</enabled>\n            </releases>\n            <snapshots>\n                <enabled>true</enabled>\n            </snapshots>\n        </repository>\n
        static private final byte[] PLAIN_TEXT_10_0;
        //     </repositories>\n    <dependencies>\n
        static private final byte[] PLAIN_TEXT_11_0;
        //         <dependency>\n            <groupId>
        static private final byte[] PLAIN_TEXT_12_0;
        // </groupId>\n            <artifactId>
        static private final byte[] PLAIN_TEXT_13_0;
        // </artifactId>\n            <version>
        static private final byte[] PLAIN_TEXT_14_0;
        // </version>\n        </dependency>\n
        static private final byte[] PLAIN_TEXT_15_0;
        // </artifactId>\n        </dependency>\n
        static private final byte[] PLAIN_TEXT_16_0;
        // </version>\n            <scope>test</scope>\n        </dependency>\n
        static private final byte[] PLAIN_TEXT_17_0;
        // </artifactId>\n            <scope>test</scope>\n        </dependency>\n
        static private final byte[] PLAIN_TEXT_18_0;
        //     </dependencies>\n    <build>\n        <sourceDirectory>${project.basedir}/src/main</sourceDirectory>\n        <testSourceDirectory>${project.basedir}/src/test/kotlin</testSourceDirectory>\n        <resources>\n            <resource>\n                <directory>${project.basedir}/resources/main</directory>\n            </resource>\n        </resources>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-su...
        static private final byte[] PLAIN_TEXT_19_0;
        //             <plugin>\n                <groupId>
        static private final byte[] PLAIN_TEXT_20_0;
        // </groupId>\n                <artifactId>
        static private final byte[] PLAIN_TEXT_21_0;
        // </artifactId>\n                <version>
        static private final byte[] PLAIN_TEXT_22_0;
        // </version>\n            </plugin>\n
        static private final byte[] PLAIN_TEXT_23_0;
        // </artifactId>\n            </plugin>\n
        static private final byte[] PLAIN_TEXT_24_0;
        //         </plugins>\n    </build>\n</project>
        static private final byte[] PLAIN_TEXT_25_0;

        static {
            PlainTextUnloadedClassLoader loader = PlainTextUnloadedClassLoader.tryLoad(pomXml.class.getClassLoader(), pomXml.class.getName() + "$PlainText", "UTF-8");
            PLAIN_TEXT_0_0 = loader.tryGet("PLAIN_TEXT_0_0");
            PLAIN_TEXT_1_0 = loader.tryGet("PLAIN_TEXT_1_0");
            PLAIN_TEXT_2_0 = loader.tryGet("PLAIN_TEXT_2_0");
            PLAIN_TEXT_3_0 = loader.tryGet("PLAIN_TEXT_3_0");
            PLAIN_TEXT_4_0 = loader.tryGet("PLAIN_TEXT_4_0");
            PLAIN_TEXT_5_0 = loader.tryGet("PLAIN_TEXT_5_0");
            PLAIN_TEXT_6_0 = loader.tryGet("PLAIN_TEXT_6_0");
            PLAIN_TEXT_7_0 = loader.tryGet("PLAIN_TEXT_7_0");
            PLAIN_TEXT_8_0 = loader.tryGet("PLAIN_TEXT_8_0");
            PLAIN_TEXT_9_0 = loader.tryGet("PLAIN_TEXT_9_0");
            PLAIN_TEXT_10_0 = loader.tryGet("PLAIN_TEXT_10_0");
            PLAIN_TEXT_11_0 = loader.tryGet("PLAIN_TEXT_11_0");
            PLAIN_TEXT_12_0 = loader.tryGet("PLAIN_TEXT_12_0");
            PLAIN_TEXT_13_0 = loader.tryGet("PLAIN_TEXT_13_0");
            PLAIN_TEXT_14_0 = loader.tryGet("PLAIN_TEXT_14_0");
            PLAIN_TEXT_15_0 = loader.tryGet("PLAIN_TEXT_15_0");
            PLAIN_TEXT_16_0 = loader.tryGet("PLAIN_TEXT_16_0");
            PLAIN_TEXT_17_0 = loader.tryGet("PLAIN_TEXT_17_0");
            PLAIN_TEXT_18_0 = loader.tryGet("PLAIN_TEXT_18_0");
            PLAIN_TEXT_19_0 = loader.tryGet("PLAIN_TEXT_19_0");
            PLAIN_TEXT_20_0 = loader.tryGet("PLAIN_TEXT_20_0");
            PLAIN_TEXT_21_0 = loader.tryGet("PLAIN_TEXT_21_0");
            PLAIN_TEXT_22_0 = loader.tryGet("PLAIN_TEXT_22_0");
            PLAIN_TEXT_23_0 = loader.tryGet("PLAIN_TEXT_23_0");
            PLAIN_TEXT_24_0 = loader.tryGet("PLAIN_TEXT_24_0");
            PLAIN_TEXT_25_0 = loader.tryGet("PLAIN_TEXT_25_0");
        }

        // argument @ [6:2]
        protected final Project project;
        // argument @ [6:2]
        protected final Features features;

        public Template(pomXml model) {
            super(model);
            __internal.setCharset("UTF-8");
            __internal.setContentType(getContentType());
            __internal.setTemplateName(getTemplateName());
            __internal.setTemplatePackageName(getTemplatePackageName());
            this.project = model.project();
            this.features = model.features();
        }

        @Override
        protected void __doRender() throws IOException, RenderingException {
            // PlainText @ [9:2]
            __internal.aboutToExecutePosInTemplate(9, 2);
            __internal.writeValue(PLAIN_TEXT_0_0);
            // ValueExpression @ [15:14]
            __internal.aboutToExecutePosInTemplate(15, 14);
            __internal.renderValue(project.getGroupName(), false);
            // PlainText @ [15:37]
            __internal.aboutToExecutePosInTemplate(15, 37);
            __internal.writeValue(PLAIN_TEXT_1_0);
            // ValueExpression @ [16:17]
            __internal.aboutToExecutePosInTemplate(16, 17);
            __internal.renderValue(project.getArtifactId(), false);
            // PlainText @ [16:41]
            __internal.aboutToExecutePosInTemplate(16, 41);
            __internal.writeValue(PLAIN_TEXT_2_0);
            // ValueExpression @ [18:11]
            __internal.aboutToExecutePosInTemplate(18, 11);
            __internal.renderValue(project.getName(), false);
            // PlainText @ [18:29]
            __internal.aboutToExecutePosInTemplate(18, 29);
            __internal.writeValue(PLAIN_TEXT_3_0);
            // ValueExpression @ [19:18]
            __internal.aboutToExecutePosInTemplate(19, 18);
            __internal.renderValue(project.getName(), false);
            // PlainText @ [19:36]
            __internal.aboutToExecutePosInTemplate(19, 36);
            __internal.writeValue(PLAIN_TEXT_4_0);
            // ValueExpression @ [21:23]
            __internal.aboutToExecutePosInTemplate(21, 23);
            __internal.renderValue(project.getKtorVersion(), false);
            // PlainText @ [21:48]
            __internal.aboutToExecutePosInTemplate(21, 48);
            __internal.writeValue(PLAIN_TEXT_5_0);
            // ValueExpression @ [23:25]
            __internal.aboutToExecutePosInTemplate(23, 25);
            __internal.renderValue(project.getKotlinVersion(), false);
            // PlainText @ [23:52]
            __internal.aboutToExecutePosInTemplate(23, 52);
            __internal.writeValue(PLAIN_TEXT_6_0);
            // ValueExpression @ [26:21]
            __internal.aboutToExecutePosInTemplate(26, 21);
            __internal.renderValue(project.getMainClassName(), false);
            // PlainText @ [26:48]
            __internal.aboutToExecutePosInTemplate(26, 48);
            __internal.writeValue(PLAIN_TEXT_7_0);
            // ForBlockBegin @ [29:9]
            __internal.aboutToExecutePosInTemplate(29, 9);
            try {
                com.fizzed.rocker.runtime.Java8Iterator.forEach(features, (feature) -> {
                    try {
                        // WithBlockBegin @ [30:13]
                        __internal.aboutToExecutePosInTemplate(30, 13);
                        com.fizzed.rocker.runtime.WithBlock.with(features.getAllMavenRepositories(), false, (repos) -> {
                            // ForBlockBegin @ [31:17]
                            __internal.aboutToExecutePosInTemplate(31, 17);
                            try {
                                com.fizzed.rocker.runtime.Java8Iterator.forEach(repos, (repo) -> {
                                    try {
                                        // PlainText @ [31:37]
                                        __internal.aboutToExecutePosInTemplate(31, 37);
                                        __internal.writeValue(PLAIN_TEXT_8_0);
                                        // ValueExpression @ [33:17]
                                        __internal.aboutToExecutePosInTemplate(33, 17);
                                        __internal.renderValue(repo.getId(), false);
                                        // PlainText @ [33:30]
                                        __internal.aboutToExecutePosInTemplate(33, 30);
                                        __internal.writeValue(PLAIN_TEXT_9_0);
                                        // ValueExpression @ [34:18]
                                        __internal.aboutToExecutePosInTemplate(34, 18);
                                        __internal.renderValue(repo.getUrl(), false);
                                        // PlainText @ [34:32]
                                        __internal.aboutToExecutePosInTemplate(34, 32);
                                        __internal.writeValue(PLAIN_TEXT_10_0);
                                        // ForBlockEnd @ [31:17]
                                        __internal.aboutToExecutePosInTemplate(31, 17);
                                    } catch (com.fizzed.rocker.runtime.ContinueException e) {
                                        // support for continuing for loops
                                    }
                                }); // for end @ [31:17]
                            } catch (com.fizzed.rocker.runtime.BreakException e) {
                                // support for breaking for loops
                            }
                            // WithBlockEnd @ [30:13]
                            __internal.aboutToExecutePosInTemplate(30, 13);
                        }); // with end @ [30:13]
                        // ForBlockEnd @ [29:9]
                        __internal.aboutToExecutePosInTemplate(29, 9);
                    } catch (com.fizzed.rocker.runtime.ContinueException e) {
                        // support for continuing for loops
                    }
                }); // for end @ [29:9]
            } catch (com.fizzed.rocker.runtime.BreakException e) {
                // support for breaking for loops
            }
            // PlainText @ [44:10]
            __internal.aboutToExecutePosInTemplate(44, 10);
            __internal.writeValue(PLAIN_TEXT_11_0);
            // WithBlockBegin @ [47:9]
            __internal.aboutToExecutePosInTemplate(47, 9);
            com.fizzed.rocker.runtime.WithBlock.with(features.getMavenDependencies(), false, (dependencies) -> {
                // ForBlockBegin @ [48:13]
                __internal.aboutToExecutePosInTemplate(48, 13);
                try {
                    com.fizzed.rocker.runtime.Java8Iterator.forEach(dependencies, (dependency) -> {
                        try {
                            // IfBlockBegin @ [49:17]
                            __internal.aboutToExecutePosInTemplate(49, 17);
                            if (dependency.getVersion() != null) {
                                // PlainText @ [49:56]
                                __internal.aboutToExecutePosInTemplate(49, 56);
                                __internal.writeValue(PLAIN_TEXT_12_0);
                                // ValueExpression @ [51:22]
                                __internal.aboutToExecutePosInTemplate(51, 22);
                                __internal.renderValue(dependency.getGroup(), false);
                                // PlainText @ [51:44]
                                __internal.aboutToExecutePosInTemplate(51, 44);
                                __internal.writeValue(PLAIN_TEXT_13_0);
                                // ValueExpression @ [52:25]
                                __internal.aboutToExecutePosInTemplate(52, 25);
                                __internal.renderValue(dependency.getArtifact(), false);
                                // PlainText @ [52:50]
                                __internal.aboutToExecutePosInTemplate(52, 50);
                                __internal.writeValue(PLAIN_TEXT_14_0);
                                // ValueExpression @ [53:22]
                                __internal.aboutToExecutePosInTemplate(53, 22);
                                __internal.renderValue(dependency.getVersion().getMavenFormat(), false);
                                // PlainText @ [53:63]
                                __internal.aboutToExecutePosInTemplate(53, 63);
                                __internal.writeValue(PLAIN_TEXT_15_0);
                                // IfBlockElse @ [55:17]
                                __internal.aboutToExecutePosInTemplate(55, 17);
                            } else { // else @ [55:17]
                                // PlainText @ [55:25]
                                __internal.aboutToExecutePosInTemplate(55, 25);
                                __internal.writeValue(PLAIN_TEXT_12_0);
                                // ValueExpression @ [57:22]
                                __internal.aboutToExecutePosInTemplate(57, 22);
                                __internal.renderValue(dependency.getGroup(), false);
                                // PlainText @ [57:44]
                                __internal.aboutToExecutePosInTemplate(57, 44);
                                __internal.writeValue(PLAIN_TEXT_13_0);
                                // ValueExpression @ [58:25]
                                __internal.aboutToExecutePosInTemplate(58, 25);
                                __internal.renderValue(dependency.getArtifact(), false);
                                // PlainText @ [58:50]
                                __internal.aboutToExecutePosInTemplate(58, 50);
                                __internal.writeValue(PLAIN_TEXT_16_0);
                                // IfBlockEnd @ [49:17]
                                __internal.aboutToExecutePosInTemplate(49, 17);
                            } // if end @ [49:17]
                            // ForBlockEnd @ [48:13]
                            __internal.aboutToExecutePosInTemplate(48, 13);
                        } catch (com.fizzed.rocker.runtime.ContinueException e) {
                            // support for continuing for loops
                        }
                    }); // for end @ [48:13]
                } catch (com.fizzed.rocker.runtime.BreakException e) {
                    // support for breaking for loops
                }
                // WithBlockEnd @ [47:9]
                __internal.aboutToExecutePosInTemplate(47, 9);
            }); // with end @ [47:9]
            // WithBlockBegin @ [63:9]
            __internal.aboutToExecutePosInTemplate(63, 9);
            com.fizzed.rocker.runtime.WithBlock.with(features.getTestMavenDependencies(), false, (dependencies) -> {
                // ForBlockBegin @ [64:13]
                __internal.aboutToExecutePosInTemplate(64, 13);
                try {
                    com.fizzed.rocker.runtime.Java8Iterator.forEach(dependencies, (dependency) -> {
                        try {
                            // IfBlockBegin @ [65:17]
                            __internal.aboutToExecutePosInTemplate(65, 17);
                            if (dependency.getVersion() != null) {
                                // PlainText @ [65:56]
                                __internal.aboutToExecutePosInTemplate(65, 56);
                                __internal.writeValue(PLAIN_TEXT_12_0);
                                // ValueExpression @ [67:22]
                                __internal.aboutToExecutePosInTemplate(67, 22);
                                __internal.renderValue(dependency.getGroup(), false);
                                // PlainText @ [67:44]
                                __internal.aboutToExecutePosInTemplate(67, 44);
                                __internal.writeValue(PLAIN_TEXT_13_0);
                                // ValueExpression @ [68:25]
                                __internal.aboutToExecutePosInTemplate(68, 25);
                                __internal.renderValue(dependency.getArtifact(), false);
                                // PlainText @ [68:50]
                                __internal.aboutToExecutePosInTemplate(68, 50);
                                __internal.writeValue(PLAIN_TEXT_14_0);
                                // ValueExpression @ [69:22]
                                __internal.aboutToExecutePosInTemplate(69, 22);
                                __internal.renderValue(dependency.getVersion().getMavenFormat(), false);
                                // PlainText @ [69:63]
                                __internal.aboutToExecutePosInTemplate(69, 63);
                                __internal.writeValue(PLAIN_TEXT_17_0);
                                // IfBlockElse @ [72:17]
                                __internal.aboutToExecutePosInTemplate(72, 17);
                            } else { // else @ [72:17]
                                // PlainText @ [72:25]
                                __internal.aboutToExecutePosInTemplate(72, 25);
                                __internal.writeValue(PLAIN_TEXT_12_0);
                                // ValueExpression @ [74:22]
                                __internal.aboutToExecutePosInTemplate(74, 22);
                                __internal.renderValue(dependency.getGroup(), false);
                                // PlainText @ [74:44]
                                __internal.aboutToExecutePosInTemplate(74, 44);
                                __internal.writeValue(PLAIN_TEXT_13_0);
                                // ValueExpression @ [75:25]
                                __internal.aboutToExecutePosInTemplate(75, 25);
                                __internal.renderValue(dependency.getArtifact(), false);
                                // PlainText @ [75:50]
                                __internal.aboutToExecutePosInTemplate(75, 50);
                                __internal.writeValue(PLAIN_TEXT_18_0);
                                // IfBlockEnd @ [65:17]
                                __internal.aboutToExecutePosInTemplate(65, 17);
                            } // if end @ [65:17]
                            // ForBlockEnd @ [64:13]
                            __internal.aboutToExecutePosInTemplate(64, 13);
                        } catch (com.fizzed.rocker.runtime.ContinueException e) {
                            // support for continuing for loops
                        }
                    }); // for end @ [64:13]
                } catch (com.fizzed.rocker.runtime.BreakException e) {
                    // support for breaking for loops
                }
                // WithBlockEnd @ [63:9]
                __internal.aboutToExecutePosInTemplate(63, 9);
            }); // with end @ [63:9]
            // PlainText @ [80:10]
            __internal.aboutToExecutePosInTemplate(80, 10);
            __internal.writeValue(PLAIN_TEXT_19_0);
            // WithBlockBegin @ [164:13]
            __internal.aboutToExecutePosInTemplate(164, 13);
            com.fizzed.rocker.runtime.WithBlock.with(features.getAllMavenPlugins(), false, (requiredPlugins) -> {
                // ForBlockBegin @ [165:17]
                __internal.aboutToExecutePosInTemplate(165, 17);
                try {
                    com.fizzed.rocker.runtime.Java8Iterator.forEach(requiredPlugins, (plugin) -> {
                        try {
                            // IfBlockBegin @ [166:21]
                            __internal.aboutToExecutePosInTemplate(166, 21);
                            if (plugin.getVersion() != null) {
                                // PlainText @ [166:56]
                                __internal.aboutToExecutePosInTemplate(166, 56);
                                __internal.writeValue(PLAIN_TEXT_20_0);
                                // ValueExpression @ [168:26]
                                __internal.aboutToExecutePosInTemplate(168, 26);
                                __internal.renderValue(plugin.getGroup(), false);
                                // PlainText @ [168:44]
                                __internal.aboutToExecutePosInTemplate(168, 44);
                                __internal.writeValue(PLAIN_TEXT_21_0);
                                // ValueExpression @ [169:29]
                                __internal.aboutToExecutePosInTemplate(169, 29);
                                __internal.renderValue(plugin.getArtifact(), false);
                                // PlainText @ [169:50]
                                __internal.aboutToExecutePosInTemplate(169, 50);
                                __internal.writeValue(PLAIN_TEXT_22_0);
                                // ValueExpression @ [170:26]
                                __internal.aboutToExecutePosInTemplate(170, 26);
                                __internal.renderValue(plugin.getVersion(), false);
                                // PlainText @ [170:46]
                                __internal.aboutToExecutePosInTemplate(170, 46);
                                __internal.writeValue(PLAIN_TEXT_23_0);
                                // IfBlockElse @ [172:21]
                                __internal.aboutToExecutePosInTemplate(172, 21);
                            } else { // else @ [172:21]
                                // PlainText @ [172:29]
                                __internal.aboutToExecutePosInTemplate(172, 29);
                                __internal.writeValue(PLAIN_TEXT_20_0);
                                // ValueExpression @ [174:26]
                                __internal.aboutToExecutePosInTemplate(174, 26);
                                __internal.renderValue(plugin.getGroup(), false);
                                // PlainText @ [174:44]
                                __internal.aboutToExecutePosInTemplate(174, 44);
                                __internal.writeValue(PLAIN_TEXT_21_0);
                                // ValueExpression @ [175:29]
                                __internal.aboutToExecutePosInTemplate(175, 29);
                                __internal.renderValue(plugin.getArtifact(), false);
                                // PlainText @ [175:50]
                                __internal.aboutToExecutePosInTemplate(175, 50);
                                __internal.writeValue(PLAIN_TEXT_24_0);
                                // IfBlockEnd @ [166:21]
                                __internal.aboutToExecutePosInTemplate(166, 21);
                            } // if end @ [166:21]
                            // ForBlockEnd @ [165:17]
                            __internal.aboutToExecutePosInTemplate(165, 17);
                        } catch (com.fizzed.rocker.runtime.ContinueException e) {
                            // support for continuing for loops
                        }
                    }); // for end @ [165:17]
                } catch (com.fizzed.rocker.runtime.BreakException e) {
                    // support for breaking for loops
                }
                // WithBlockEnd @ [164:13]
                __internal.aboutToExecutePosInTemplate(164, 13);
            }); // with end @ [164:13]
            // PlainText @ [179:14]
            __internal.aboutToExecutePosInTemplate(179, 14);
            __internal.writeValue(PLAIN_TEXT_25_0);
        }
    }

    private static class PlainText {

        static private final String PLAIN_TEXT_0_0 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>";
        static private final String PLAIN_TEXT_1_0 = "</groupId>\n    <artifactId>";
        static private final String PLAIN_TEXT_2_0 = "</artifactId>\n    <version>0.0.1</version>\n    <name>";
        static private final String PLAIN_TEXT_3_0 = "</name>\n    <description>";
        static private final String PLAIN_TEXT_4_0 = "</description>\n    <properties>\n        <ktor_version>";
        static private final String PLAIN_TEXT_5_0 = "</ktor_version>\n        <kotlin.code.style>official</kotlin.code.style>\n        <kotlin_version>";
        static private final String PLAIN_TEXT_6_0 = "</kotlin_version>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <kotlin.compiler.incremental>true</kotlin.compiler.incremental>\n        <main.class>";
        static private final String PLAIN_TEXT_7_0 = "</main.class>\n    </properties>\n    <repositories>\n";
        static private final String PLAIN_TEXT_8_0 = "        <repository>\n            <id>";
        static private final String PLAIN_TEXT_9_0 = "</id>\n            <url>";
        static private final String PLAIN_TEXT_10_0 = "</url>\n            <releases>\n                <enabled>true</enabled>\n            </releases>\n            <snapshots>\n                <enabled>true</enabled>\n            </snapshots>\n        </repository>\n";
        static private final String PLAIN_TEXT_11_0 = "    </repositories>\n    <dependencies>\n";
        static private final String PLAIN_TEXT_12_0 = "        <dependency>\n            <groupId>";
        static private final String PLAIN_TEXT_13_0 = "</groupId>\n            <artifactId>";
        static private final String PLAIN_TEXT_14_0 = "</artifactId>\n            <version>";
        static private final String PLAIN_TEXT_15_0 = "</version>\n        </dependency>\n";
        static private final String PLAIN_TEXT_16_0 = "</artifactId>\n        </dependency>\n";
        static private final String PLAIN_TEXT_17_0 = "</version>\n            <scope>test</scope>\n        </dependency>\n";
        static private final String PLAIN_TEXT_18_0 = "</artifactId>\n            <scope>test</scope>\n        </dependency>\n";
        static private final String PLAIN_TEXT_19_0 = "    </dependencies>\n    <build>\n        <sourceDirectory>${project.basedir}/src/main</sourceDirectory>\n        <testSourceDirectory>${project.basedir}/src/test/kotlin</testSourceDirectory>\n        <resources>\n            <resource>\n                <directory>${project.basedir}/resources/main</directory>\n            </resource>\n        </resources>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n            </plugin>\n            <plugin>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <source>1.8</source>\n                    <target>1.8</target>\n                </configuration>\n            </plugin>\n            <plugin>\n                <artifactId>kotlin-maven-plugin</artifactId>\n                <groupId>org.jetbrains.kotlin</groupId>\n                <version>${kotlin_version}</version>\n                <executions>\n                    <execution>\n                        <id>compile</id>\n                        <goals>\n                            <goal>compile</goal>\n                        </goals>\n                        <configuration>\n                            <experimentalCoroutines>enable</experimentalCoroutines>\n                        </configuration>\n                    </execution>\n                    <execution>\n                        <id>test-compile</id>\n                        <goals>\n                            <goal>test-compile</goal>\n                        </goals>\n                        <configuration>\n                            <experimentalCoroutines>enable</experimentalCoroutines>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-jar-plugin</artifactId>\n                <version>2.6</version>\n                <configuration>\n                    <archive>\n                        <manifest>\n                            <addClasspath>true</addClasspath>\n                            <mainClass>${main.class}</mainClass>\n                        </manifest>\n                    </archive>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-assembly-plugin</artifactId>\n                <version>2.6</version>\n                <executions>\n                    <execution>\n                        <id>make-assembly</id>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>single</goal>\n                        </goals>\n                        <configuration>\n                            <archive>\n                                <manifest>\n                                    <mainClass>${main.class}</mainClass>\n                                </manifest>\n                            </archive>\n                            <descriptorRefs>\n                                <descriptorRef>jar-with-dependencies</descriptorRef>\n                            </descriptorRefs>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n";
        static private final String PLAIN_TEXT_20_0 = "            <plugin>\n                <groupId>";
        static private final String PLAIN_TEXT_21_0 = "</groupId>\n                <artifactId>";
        static private final String PLAIN_TEXT_22_0 = "</artifactId>\n                <version>";
        static private final String PLAIN_TEXT_23_0 = "</version>\n            </plugin>\n";
        static private final String PLAIN_TEXT_24_0 = "</artifactId>\n            </plugin>\n";
        static private final String PLAIN_TEXT_25_0 = "        </plugins>\n    </build>\n</project>";

    }

}
