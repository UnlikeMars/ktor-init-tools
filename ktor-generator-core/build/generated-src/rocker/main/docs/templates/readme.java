package docs.templates;

import java.io.IOException;
import com.fizzed.rocker.ForIterator;
import com.fizzed.rocker.RenderingException;
import com.fizzed.rocker.RockerContent;
import com.fizzed.rocker.RockerOutput;
import com.fizzed.rocker.runtime.DefaultRockerTemplate;
import com.fizzed.rocker.runtime.PlainTextUnloadedClassLoader;
// import @ [1:1]
import io.ktor.generator.core.Project;
// import @ [2:1]
import io.ktor.generator.core.BuildSystem;
// import @ [3:1]
import io.ktor.generator.core.features.KtorFeature;
// import @ [4:1]
import io.ktor.generator.core.features.KtorFeatureDocumentation;
// import @ [5:1]
import io.ktor.generator.core.features.Features;
// import @ [6:1]
import io.ktor.generator.core.features.FeatureInstallReceipt;
// import @ [7:1]
import io.ktor.generator.core.features.CodeTemplate;

/*
 * Auto generated code to render template docs/templates/readme.rocker.raw
 * Do not edit this file. Changes will eventually be overwritten by Rocker parser!
 */
@SuppressWarnings("unused")
public class readme extends com.fizzed.rocker.runtime.DefaultRockerModel {

    static public com.fizzed.rocker.ContentType getContentType() { return com.fizzed.rocker.ContentType.RAW; }
    static public String getTemplateName() { return "readme.rocker.raw"; }
    static public String getTemplatePackageName() { return "docs.templates"; }
    static public String getHeaderHash() { return "1178576215"; }
    static public String[] getArgumentNames() { return new String[] { "project", "features" }; }

    // argument @ [9:2]
    private Project project;
    // argument @ [9:2]
    private Features features;

    public readme project(Project project) {
        this.project = project;
        return this;
    }

    public Project project() {
        return this.project;
    }

    public readme features(Features features) {
        this.features = features;
        return this;
    }

    public Features features() {
        return this.features;
    }

    static public readme template(Project project, Features features) {
        return new readme()
            .project(project)
            .features(features);
    }

    @Override
    protected DefaultRockerTemplate buildTemplate() throws RenderingException {
        // optimized for performance (via rocker.optimize flag; no auto reloading)
        return new Template(this);
    }

    static public class Template extends com.fizzed.rocker.runtime.DefaultRockerTemplate {

        // # 
        static private final byte[] PLAIN_TEXT_0_0;
        // \n\n
        static private final byte[] PLAIN_TEXT_1_0;
        //  is your new project powered by [Ktor](http://ktor.io) framework.\n\n<img src=\"http://ktor.io/assets/images/ktor_logo.png\" alt=\"Ktor\" width=\"100\" style=\"max-width:20%;\">\n\nCompany website: 
        static private final byte[] PLAIN_TEXT_2_0;
        // \nKtor Version: 
        static private final byte[] PLAIN_TEXT_3_0;
        // \nKotlin Version: 
        static private final byte[] PLAIN_TEXT_4_0;
        // \n
        static private final byte[] PLAIN_TEXT_5_0;
        // BuildSystem: [Gradle](https://gradle.org)\n
        static private final byte[] PLAIN_TEXT_6_0;
        // BuildSystem: [Gradle with Kotlin DSL](https://docs.gradle.org/current/userguide/kotlin_dsl.html)\n
        static private final byte[] PLAIN_TEXT_7_0;
        // BuildSystem: [Maven](https://maven.apache.org)\n
        static private final byte[] PLAIN_TEXT_8_0;
        // \n# Ktor Documentation\n\nKtor is a framework for quickly creating web applications in Kotlin with minimal effort.\n\n* Ktor project's [Github](https://github.com/ktorio/ktor/blob/master/README.md)\n* Getting started with [Gradle](http://ktor.io/quickstart/gradle.html)\n* Getting started with [Maven](http://ktor.io/quickstart/maven.html)\n* Getting started with [IDEA](http://ktor.io/quickstart/intellij-idea.html)\n\nSelected Features:\n
        static private final byte[] PLAIN_TEXT_9_0;
        // * [
        static private final byte[] PLAIN_TEXT_10_0;
        // ](#
        static private final byte[] PLAIN_TEXT_11_0;
        // )\n
        static private final byte[] PLAIN_TEXT_12_0;
        // ## 
        static private final byte[] PLAIN_TEXT_13_0;
        //  Documentation ([
        static private final byte[] PLAIN_TEXT_14_0;
        // ](
        static private final byte[] PLAIN_TEXT_15_0;
        // ))\n\n
        static private final byte[] PLAIN_TEXT_16_0;
        // ### Description\n\n
        static private final byte[] PLAIN_TEXT_17_0;
        // \n\n### Usage\n\n
        static private final byte[] PLAIN_TEXT_18_0;
        // \n\n### Options\n\n
        static private final byte[] PLAIN_TEXT_19_0;
        // ()\n\n
        static private final byte[] PLAIN_TEXT_20_0;
        // # Reporting Issues / Support\n\nPlease use [our issue tracker](https://youtrack.jetbrains.com/issues/KTOR) for filing feature requests and bugs. If you'd like to ask a question, we recommmend [StackOverflow](https://stackoverflow.com/questions/tagged/ktor) where members of the team monitor frequently.\n\nThere is also community support on the [Kotlin Slack Ktor channel](https://app.slack.com/client/T09229ZC6/C0A974TJ9)\n\n# Reporting Security Vulnerabilities\n\nIf you find a security vulnerab...
        static private final byte[] PLAIN_TEXT_21_0;

        static {
            PlainTextUnloadedClassLoader loader = PlainTextUnloadedClassLoader.tryLoad(readme.class.getClassLoader(), readme.class.getName() + "$PlainText", "UTF-8");
            PLAIN_TEXT_0_0 = loader.tryGet("PLAIN_TEXT_0_0");
            PLAIN_TEXT_1_0 = loader.tryGet("PLAIN_TEXT_1_0");
            PLAIN_TEXT_2_0 = loader.tryGet("PLAIN_TEXT_2_0");
            PLAIN_TEXT_3_0 = loader.tryGet("PLAIN_TEXT_3_0");
            PLAIN_TEXT_4_0 = loader.tryGet("PLAIN_TEXT_4_0");
            PLAIN_TEXT_5_0 = loader.tryGet("PLAIN_TEXT_5_0");
            PLAIN_TEXT_6_0 = loader.tryGet("PLAIN_TEXT_6_0");
            PLAIN_TEXT_7_0 = loader.tryGet("PLAIN_TEXT_7_0");
            PLAIN_TEXT_8_0 = loader.tryGet("PLAIN_TEXT_8_0");
            PLAIN_TEXT_9_0 = loader.tryGet("PLAIN_TEXT_9_0");
            PLAIN_TEXT_10_0 = loader.tryGet("PLAIN_TEXT_10_0");
            PLAIN_TEXT_11_0 = loader.tryGet("PLAIN_TEXT_11_0");
            PLAIN_TEXT_12_0 = loader.tryGet("PLAIN_TEXT_12_0");
            PLAIN_TEXT_13_0 = loader.tryGet("PLAIN_TEXT_13_0");
            PLAIN_TEXT_14_0 = loader.tryGet("PLAIN_TEXT_14_0");
            PLAIN_TEXT_15_0 = loader.tryGet("PLAIN_TEXT_15_0");
            PLAIN_TEXT_16_0 = loader.tryGet("PLAIN_TEXT_16_0");
            PLAIN_TEXT_17_0 = loader.tryGet("PLAIN_TEXT_17_0");
            PLAIN_TEXT_18_0 = loader.tryGet("PLAIN_TEXT_18_0");
            PLAIN_TEXT_19_0 = loader.tryGet("PLAIN_TEXT_19_0");
            PLAIN_TEXT_20_0 = loader.tryGet("PLAIN_TEXT_20_0");
            PLAIN_TEXT_21_0 = loader.tryGet("PLAIN_TEXT_21_0");
        }

        // argument @ [9:2]
        protected final Project project;
        // argument @ [9:2]
        protected final Features features;

        public Template(readme model) {
            super(model);
            __internal.setCharset("UTF-8");
            __internal.setContentType(getContentType());
            __internal.setTemplateName(getTemplateName());
            __internal.setTemplatePackageName(getTemplatePackageName());
            this.project = model.project();
            this.features = model.features();
        }

        @Override
        protected void __doRender() throws IOException, RenderingException {
            // PlainText @ [12:2]
            __internal.aboutToExecutePosInTemplate(12, 2);
            __internal.writeValue(PLAIN_TEXT_0_0);
            // ValueExpression @ [14:3]
            __internal.aboutToExecutePosInTemplate(14, 3);
            __internal.renderValue(project.getName(), false);
            // PlainText @ [14:21]
            __internal.aboutToExecutePosInTemplate(14, 21);
            __internal.writeValue(PLAIN_TEXT_1_0);
            // ValueExpression @ [16:1]
            __internal.aboutToExecutePosInTemplate(16, 1);
            __internal.renderValue(project.getName(), false);
            // PlainText @ [16:19]
            __internal.aboutToExecutePosInTemplate(16, 19);
            __internal.writeValue(PLAIN_TEXT_2_0);
            // ValueExpression @ [20:18]
            __internal.aboutToExecutePosInTemplate(20, 18);
            __internal.renderValue(project.getCompanyWebsite(), false);
            // PlainText @ [20:46]
            __internal.aboutToExecutePosInTemplate(20, 46);
            __internal.writeValue(PLAIN_TEXT_3_0);
            // ValueExpression @ [21:15]
            __internal.aboutToExecutePosInTemplate(21, 15);
            __internal.renderValue(project.getKtorVersion(), false);
            // PlainText @ [21:40]
            __internal.aboutToExecutePosInTemplate(21, 40);
            __internal.writeValue(PLAIN_TEXT_4_0);
            // ValueExpression @ [22:17]
            __internal.aboutToExecutePosInTemplate(22, 17);
            __internal.renderValue(project.getKotlinVersion(), false);
            // PlainText @ [22:44]
            __internal.aboutToExecutePosInTemplate(22, 44);
            __internal.writeValue(PLAIN_TEXT_5_0);
            // IfBlockBegin @ [23:1]
            __internal.aboutToExecutePosInTemplate(23, 1);
            if (project.getBuildSystem() == BuildSystem.GRADLE) {
                // PlainText @ [23:55]
                __internal.aboutToExecutePosInTemplate(23, 55);
                __internal.writeValue(PLAIN_TEXT_6_0);
                // IfBlockEnd @ [23:1]
                __internal.aboutToExecutePosInTemplate(23, 1);
            } // if end @ [23:1]
            // IfBlockBegin @ [26:1]
            __internal.aboutToExecutePosInTemplate(26, 1);
            if (project.getBuildSystem() == BuildSystem.GRADLE_KTS) {
                // PlainText @ [26:59]
                __internal.aboutToExecutePosInTemplate(26, 59);
                __internal.writeValue(PLAIN_TEXT_7_0);
                // IfBlockEnd @ [26:1]
                __internal.aboutToExecutePosInTemplate(26, 1);
            } // if end @ [26:1]
            // IfBlockBegin @ [29:1]
            __internal.aboutToExecutePosInTemplate(29, 1);
            if (project.getBuildSystem() == BuildSystem.MAVEN) {
                // PlainText @ [29:54]
                __internal.aboutToExecutePosInTemplate(29, 54);
                __internal.writeValue(PLAIN_TEXT_8_0);
                // IfBlockEnd @ [29:1]
                __internal.aboutToExecutePosInTemplate(29, 1);
            } // if end @ [29:1]
            // PlainText @ [31:2]
            __internal.aboutToExecutePosInTemplate(31, 2);
            __internal.writeValue(PLAIN_TEXT_9_0);
            // ForBlockBegin @ [43:1]
            __internal.aboutToExecutePosInTemplate(43, 1);
            try {
                com.fizzed.rocker.runtime.Java8Iterator.forEach(features, (feature) -> {
                    try {
                        // IfBlockBegin @ [44:1]
                        __internal.aboutToExecutePosInTemplate(44, 1);
                        if (feature.getDescription() != null) {
                            // WithBlockBegin @ [45:1]
                            __internal.aboutToExecutePosInTemplate(45, 1);
                            WithBlocksGenerated0.with(feature.getName(), feature.getName().toLowerCase().replace(' ', '-'), false, (name, miniName) -> {
                                // PlainText @ [45:97]
                                __internal.aboutToExecutePosInTemplate(45, 97);
                                __internal.writeValue(PLAIN_TEXT_10_0);
                                // ValueExpression @ [46:4]
                                __internal.aboutToExecutePosInTemplate(46, 4);
                                __internal.renderValue(feature.getName(), false);
                                // PlainText @ [46:22]
                                __internal.aboutToExecutePosInTemplate(46, 22);
                                __internal.writeValue(PLAIN_TEXT_11_0);
                                // ValueExpression @ [46:25]
                                __internal.aboutToExecutePosInTemplate(46, 25);
                                __internal.renderValue(raw(miniName), false);
                                // ValueExpression @ [46:39]
                                __internal.aboutToExecutePosInTemplate(46, 39);
                                __internal.renderValue(raw("-documentation-jetbrainshttpswwwjetbrainscom"), false);
                                // PlainText @ [46:91]
                                __internal.aboutToExecutePosInTemplate(46, 91);
                                __internal.writeValue(PLAIN_TEXT_12_0);
                                // WithBlockEnd @ [45:1]
                                __internal.aboutToExecutePosInTemplate(45, 1);
                            }); // with end @ [45:1]
                            // IfBlockEnd @ [44:1]
                            __internal.aboutToExecutePosInTemplate(44, 1);
                        } // if end @ [44:1]
                        // ForBlockEnd @ [43:1]
                        __internal.aboutToExecutePosInTemplate(43, 1);
                    } catch (com.fizzed.rocker.runtime.ContinueException e) {
                        // support for continuing for loops
                    }
                }); // for end @ [43:1]
            } catch (com.fizzed.rocker.runtime.BreakException e) {
                // support for breaking for loops
            }
            // PlainText @ [49:2]
            __internal.aboutToExecutePosInTemplate(49, 2);
            __internal.writeValue(PLAIN_TEXT_5_0);
            // ForBlockBegin @ [51:1]
            __internal.aboutToExecutePosInTemplate(51, 1);
            try {
                com.fizzed.rocker.runtime.Java8Iterator.forEach(features, (feature) -> {
                    try {
                        // IfBlockBegin @ [52:1]
                        __internal.aboutToExecutePosInTemplate(52, 1);
                        if (feature.getDescription() != null) {
                            // PlainText @ [52:41]
                            __internal.aboutToExecutePosInTemplate(52, 41);
                            __internal.writeValue(PLAIN_TEXT_13_0);
                            // ValueExpression @ [53:4]
                            __internal.aboutToExecutePosInTemplate(53, 4);
                            __internal.renderValue(feature.getName(), false);
                            // PlainText @ [53:22]
                            __internal.aboutToExecutePosInTemplate(53, 22);
                            __internal.writeValue(PLAIN_TEXT_14_0);
                            // ValueExpression @ [53:39]
                            __internal.aboutToExecutePosInTemplate(53, 39);
                            __internal.renderValue(feature.getVendor().getName(), false);
                            // PlainText @ [53:69]
                            __internal.aboutToExecutePosInTemplate(53, 69);
                            __internal.writeValue(PLAIN_TEXT_15_0);
                            // ValueExpression @ [53:71]
                            __internal.aboutToExecutePosInTemplate(53, 71);
                            __internal.renderValue(feature.getVendor().getUrl(), false);
                            // PlainText @ [53:100]
                            __internal.aboutToExecutePosInTemplate(53, 100);
                            __internal.writeValue(PLAIN_TEXT_16_0);
                            // ValueExpression @ [55:1]
                            __internal.aboutToExecutePosInTemplate(55, 1);
                            __internal.renderValue(feature.getDescription(), false);
                            // PlainText @ [55:26]
                            __internal.aboutToExecutePosInTemplate(55, 26);
                            __internal.writeValue(PLAIN_TEXT_1_0);
                            // IfBlockBegin @ [57:1]
                            __internal.aboutToExecutePosInTemplate(57, 1);
                            if (feature.getDocumentation() != null) {
                                // WithBlockBegin @ [58:1]
                                __internal.aboutToExecutePosInTemplate(58, 1);
                                com.fizzed.rocker.runtime.WithBlock.with(feature.getDocumentation(), false, (documentation) -> {
                                    // PlainText @ [58:52]
                                    __internal.aboutToExecutePosInTemplate(58, 52);
                                    __internal.writeValue(PLAIN_TEXT_17_0);
                                    // ValueExpression @ [61:1]
                                    __internal.aboutToExecutePosInTemplate(61, 1);
                                    __internal.renderValue(documentation.getDescription(), false);
                                    // PlainText @ [61:32]
                                    __internal.aboutToExecutePosInTemplate(61, 32);
                                    __internal.writeValue(PLAIN_TEXT_18_0);
                                    // ValueExpression @ [65:1]
                                    __internal.aboutToExecutePosInTemplate(65, 1);
                                    __internal.renderValue(documentation.getUsage(), false);
                                    // PlainText @ [65:26]
                                    __internal.aboutToExecutePosInTemplate(65, 26);
                                    __internal.writeValue(PLAIN_TEXT_19_0);
                                    // ValueExpression @ [69:1]
                                    __internal.aboutToExecutePosInTemplate(69, 1);
                                    __internal.renderValue(documentation.getOptions(), false);
                                    // PlainText @ [69:28]
                                    __internal.aboutToExecutePosInTemplate(69, 28);
                                    __internal.writeValue(PLAIN_TEXT_20_0);
                                    // WithBlockEnd @ [58:1]
                                    __internal.aboutToExecutePosInTemplate(58, 1);
                                }); // with end @ [58:1]
                                // IfBlockEnd @ [57:1]
                                __internal.aboutToExecutePosInTemplate(57, 1);
                            } // if end @ [57:1]
                            // IfBlockEnd @ [52:1]
                            __internal.aboutToExecutePosInTemplate(52, 1);
                        } // if end @ [52:1]
                        // ForBlockEnd @ [51:1]
                        __internal.aboutToExecutePosInTemplate(51, 1);
                    } catch (com.fizzed.rocker.runtime.ContinueException e) {
                        // support for continuing for loops
                    }
                }); // for end @ [51:1]
            } catch (com.fizzed.rocker.runtime.BreakException e) {
                // support for breaking for loops
            }
            // PlainText @ [74:2]
            __internal.aboutToExecutePosInTemplate(74, 2);
            __internal.writeValue(PLAIN_TEXT_21_0);
        }
    }
    private static class WithBlocksGenerated0 { 
        interface WithStatementConsumer2<V0, V1> { 

            void accept(V0 v0, V1 v1) throws IOException;

        }
        static public <V0, V1> void with (V0 v0, V1 v1, boolean nullSafe, WithStatementConsumer2<V0, V1> consumer) throws IOException {
            consumer.accept(v0, v1);
        }
    }

    private static class PlainText {

        static private final String PLAIN_TEXT_0_0 = "# ";
        static private final String PLAIN_TEXT_1_0 = "\n\n";
        static private final String PLAIN_TEXT_2_0 = " is your new project powered by [Ktor](http://ktor.io) framework.\n\n<img src=\"http://ktor.io/assets/images/ktor_logo.png\" alt=\"Ktor\" width=\"100\" style=\"max-width:20%;\">\n\nCompany website: ";
        static private final String PLAIN_TEXT_3_0 = "\nKtor Version: ";
        static private final String PLAIN_TEXT_4_0 = "\nKotlin Version: ";
        static private final String PLAIN_TEXT_5_0 = "\n";
        static private final String PLAIN_TEXT_6_0 = "BuildSystem: [Gradle](https://gradle.org)\n";
        static private final String PLAIN_TEXT_7_0 = "BuildSystem: [Gradle with Kotlin DSL](https://docs.gradle.org/current/userguide/kotlin_dsl.html)\n";
        static private final String PLAIN_TEXT_8_0 = "BuildSystem: [Maven](https://maven.apache.org)\n";
        static private final String PLAIN_TEXT_9_0 = "\n# Ktor Documentation\n\nKtor is a framework for quickly creating web applications in Kotlin with minimal effort.\n\n* Ktor project's [Github](https://github.com/ktorio/ktor/blob/master/README.md)\n* Getting started with [Gradle](http://ktor.io/quickstart/gradle.html)\n* Getting started with [Maven](http://ktor.io/quickstart/maven.html)\n* Getting started with [IDEA](http://ktor.io/quickstart/intellij-idea.html)\n\nSelected Features:\n";
        static private final String PLAIN_TEXT_10_0 = "* [";
        static private final String PLAIN_TEXT_11_0 = "](#";
        static private final String PLAIN_TEXT_12_0 = ")\n";
        static private final String PLAIN_TEXT_13_0 = "## ";
        static private final String PLAIN_TEXT_14_0 = " Documentation ([";
        static private final String PLAIN_TEXT_15_0 = "](";
        static private final String PLAIN_TEXT_16_0 = "))\n\n";
        static private final String PLAIN_TEXT_17_0 = "### Description\n\n";
        static private final String PLAIN_TEXT_18_0 = "\n\n### Usage\n\n";
        static private final String PLAIN_TEXT_19_0 = "\n\n### Options\n\n";
        static private final String PLAIN_TEXT_20_0 = "()\n\n";
        static private final String PLAIN_TEXT_21_0 = "# Reporting Issues / Support\n\nPlease use [our issue tracker](https://youtrack.jetbrains.com/issues/KTOR) for filing feature requests and bugs. If you'd like to ask a question, we recommmend [StackOverflow](https://stackoverflow.com/questions/tagged/ktor) where members of the team monitor frequently.\n\nThere is also community support on the [Kotlin Slack Ktor channel](https://app.slack.com/client/T09229ZC6/C0A974TJ9)\n\n# Reporting Security Vulnerabilities\n\nIf you find a security vulnerability in Ktor, we kindly request that you reach out to the JetBrains security team via our [responsible disclosure process](https://www.jetbrains.com/legal/terms/responsible-disclosure.html).\n\n# Contributing\n\nPlease see [the contribution guide](CONTRIBUTING.md) and the [Code of conduct](CODE_OF_CONDUCT.md) before contributing.\n\nTODO: contribution of features guide (link)";

    }

}
