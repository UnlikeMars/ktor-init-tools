package application.templates.main;

import java.io.IOException;
import com.fizzed.rocker.ForIterator;
import com.fizzed.rocker.RenderingException;
import com.fizzed.rocker.RockerContent;
import com.fizzed.rocker.RockerOutput;
import com.fizzed.rocker.runtime.DefaultRockerTemplate;
import com.fizzed.rocker.runtime.PlainTextUnloadedClassLoader;
// import @ [1:1]
import io.ktor.generator.core.Project;
// import @ [2:1]
import io.ktor.generator.core.features.KtorFeature;
// import @ [3:1]
import io.ktor.generator.core.features.FeatureInstallReceipt;
// import @ [4:1]
import io.ktor.generator.core.features.CodeTemplate;

/*
 * Auto generated code to render template application/templates/main/featureTemplate.rocker.raw
 * Do not edit this file. Changes will eventually be overwritten by Rocker parser!
 */
@SuppressWarnings("unused")
public class featureTemplate extends com.fizzed.rocker.runtime.DefaultRockerModel {

    static public com.fizzed.rocker.ContentType getContentType() { return com.fizzed.rocker.ContentType.RAW; }
    static public String getTemplateName() { return "featureTemplate.rocker.raw"; }
    static public String getTemplatePackageName() { return "application.templates.main"; }
    static public String getHeaderHash() { return "-1639339529"; }
    static public String[] getArgumentNames() { return new String[] { "project", "feature" }; }

    // argument @ [6:2]
    private Project project;
    // argument @ [6:2]
    private KtorFeature feature;

    public featureTemplate project(Project project) {
        this.project = project;
        return this;
    }

    public Project project() {
        return this.project;
    }

    public featureTemplate feature(KtorFeature feature) {
        this.feature = feature;
        return this;
    }

    public KtorFeature feature() {
        return this.feature;
    }

    static public featureTemplate template(Project project, KtorFeature feature) {
        return new featureTemplate()
            .project(project)
            .feature(feature);
    }

    @Override
    protected DefaultRockerTemplate buildTemplate() throws RenderingException {
        // optimized for performance (via rocker.optimize flag; no auto reloading)
        return new Template(this);
    }

    static public class Template extends com.fizzed.rocker.runtime.DefaultRockerTemplate {

        // package 
        static private final byte[] PLAIN_TEXT_0_0;
        // \n\n
        static private final byte[] PLAIN_TEXT_1_0;
        //     
        static private final byte[] PLAIN_TEXT_2_0;
        // \n
        static private final byte[] PLAIN_TEXT_3_0;

        static {
            PlainTextUnloadedClassLoader loader = PlainTextUnloadedClassLoader.tryLoad(featureTemplate.class.getClassLoader(), featureTemplate.class.getName() + "$PlainText", "UTF-8");
            PLAIN_TEXT_0_0 = loader.tryGet("PLAIN_TEXT_0_0");
            PLAIN_TEXT_1_0 = loader.tryGet("PLAIN_TEXT_1_0");
            PLAIN_TEXT_2_0 = loader.tryGet("PLAIN_TEXT_2_0");
            PLAIN_TEXT_3_0 = loader.tryGet("PLAIN_TEXT_3_0");
        }

        // argument @ [6:2]
        protected final Project project;
        // argument @ [6:2]
        protected final KtorFeature feature;

        public Template(featureTemplate model) {
            super(model);
            __internal.setCharset("UTF-8");
            __internal.setContentType(getContentType());
            __internal.setTemplateName(getTemplateName());
            __internal.setTemplatePackageName(getTemplatePackageName());
            this.project = model.project();
            this.feature = model.feature();
        }

        @Override
        protected void __doRender() throws IOException, RenderingException {
            // PlainText @ [9:2]
            __internal.aboutToExecutePosInTemplate(9, 2);
            __internal.writeValue(PLAIN_TEXT_0_0);
            // ValueExpression @ [11:9]
            __internal.aboutToExecutePosInTemplate(11, 9);
            __internal.renderValue(project.getGroupName(), false);
            // PlainText @ [11:32]
            __internal.aboutToExecutePosInTemplate(11, 32);
            __internal.writeValue(PLAIN_TEXT_1_0);
            // WithBlockBegin @ [13:1]
            __internal.aboutToExecutePosInTemplate(13, 1);
            com.fizzed.rocker.runtime.WithBlock.with(feature.getExtraTemplates(), false, (templates) -> {
                // ForBlockBegin @ [14:5]
                __internal.aboutToExecutePosInTemplate(14, 5);
                try {
                    com.fizzed.rocker.runtime.Java8Iterator.forEach(templates, (template) -> {
                        try {
                            // IfBlockBegin @ [15:9]
                            __internal.aboutToExecutePosInTemplate(15, 9);
                            if (template.getPosition() == CodeTemplate.Position.SEPARATE_FILE) {
                                // PlainText @ [15:78]
                                __internal.aboutToExecutePosInTemplate(15, 78);
                                __internal.writeValue(PLAIN_TEXT_2_0);
                                // ValueExpression @ [16:5]
                                __internal.aboutToExecutePosInTemplate(16, 5);
                                __internal.renderValue(template.getText(), false);
                                // PlainText @ [16:24]
                                __internal.aboutToExecutePosInTemplate(16, 24);
                                __internal.writeValue(PLAIN_TEXT_3_0);
                                // IfBlockEnd @ [15:9]
                                __internal.aboutToExecutePosInTemplate(15, 9);
                            } // if end @ [15:9]
                            // ForBlockEnd @ [14:5]
                            __internal.aboutToExecutePosInTemplate(14, 5);
                        } catch (com.fizzed.rocker.runtime.ContinueException e) {
                            // support for continuing for loops
                        }
                    }); // for end @ [14:5]
                } catch (com.fizzed.rocker.runtime.BreakException e) {
                    // support for breaking for loops
                }
                // WithBlockEnd @ [13:1]
                __internal.aboutToExecutePosInTemplate(13, 1);
            }); // with end @ [13:1]
        }
    }

    private static class PlainText {

        static private final String PLAIN_TEXT_0_0 = "package ";
        static private final String PLAIN_TEXT_1_0 = "\n\n";
        static private final String PLAIN_TEXT_2_0 = "    ";
        static private final String PLAIN_TEXT_3_0 = "\n";

    }

}
