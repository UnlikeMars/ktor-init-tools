package application.templates.test;

import java.io.IOException;
import com.fizzed.rocker.ForIterator;
import com.fizzed.rocker.RenderingException;
import com.fizzed.rocker.RockerContent;
import com.fizzed.rocker.RockerOutput;
import com.fizzed.rocker.runtime.DefaultRockerTemplate;
import com.fizzed.rocker.runtime.PlainTextUnloadedClassLoader;
// import @ [1:1]
import io.ktor.generator.core.Project;
// import @ [2:1]
import io.ktor.generator.core.features.KtorFeature;
// import @ [3:1]
import io.ktor.generator.core.features.FeatureInstallReceipt;
// import @ [4:1]
import io.ktor.generator.core.features.Features;
// import @ [5:1]
import io.ktor.generator.core.features.CodeTemplate;

/*
 * Auto generated code to render template application/templates/test/applicationTest.rocker.raw
 * Do not edit this file. Changes will eventually be overwritten by Rocker parser!
 */
@SuppressWarnings("unused")
public class applicationTest extends com.fizzed.rocker.runtime.DefaultRockerModel {

    static public com.fizzed.rocker.ContentType getContentType() { return com.fizzed.rocker.ContentType.RAW; }
    static public String getTemplateName() { return "applicationTest.rocker.raw"; }
    static public String getTemplatePackageName() { return "application.templates.test"; }
    static public String getHeaderHash() { return "1178576215"; }
    static public String[] getArgumentNames() { return new String[] { "project", "features" }; }

    // argument @ [7:2]
    private Project project;
    // argument @ [7:2]
    private Features features;

    public applicationTest project(Project project) {
        this.project = project;
        return this;
    }

    public Project project() {
        return this.project;
    }

    public applicationTest features(Features features) {
        this.features = features;
        return this;
    }

    public Features features() {
        return this.features;
    }

    static public applicationTest template(Project project, Features features) {
        return new applicationTest()
            .project(project)
            .features(features);
    }

    @Override
    protected DefaultRockerTemplate buildTemplate() throws RenderingException {
        // optimized for performance (via rocker.optimize flag; no auto reloading)
        return new Template(this);
    }

    static public class Template extends com.fizzed.rocker.runtime.DefaultRockerTemplate {

        // package 
        static private final byte[] PLAIN_TEXT_0_0;
        // \n\n
        static private final byte[] PLAIN_TEXT_1_0;
        // import 
        static private final byte[] PLAIN_TEXT_2_0;
        // \n
        static private final byte[] PLAIN_TEXT_3_0;
        // \nclass ApplicationTest {\n
        static private final byte[] PLAIN_TEXT_4_0;
        //     
        static private final byte[] PLAIN_TEXT_5_0;
        // }
        static private final byte[] PLAIN_TEXT_6_0;

        static {
            PlainTextUnloadedClassLoader loader = PlainTextUnloadedClassLoader.tryLoad(applicationTest.class.getClassLoader(), applicationTest.class.getName() + "$PlainText", "UTF-8");
            PLAIN_TEXT_0_0 = loader.tryGet("PLAIN_TEXT_0_0");
            PLAIN_TEXT_1_0 = loader.tryGet("PLAIN_TEXT_1_0");
            PLAIN_TEXT_2_0 = loader.tryGet("PLAIN_TEXT_2_0");
            PLAIN_TEXT_3_0 = loader.tryGet("PLAIN_TEXT_3_0");
            PLAIN_TEXT_4_0 = loader.tryGet("PLAIN_TEXT_4_0");
            PLAIN_TEXT_5_0 = loader.tryGet("PLAIN_TEXT_5_0");
            PLAIN_TEXT_6_0 = loader.tryGet("PLAIN_TEXT_6_0");
        }

        // argument @ [7:2]
        protected final Project project;
        // argument @ [7:2]
        protected final Features features;

        public Template(applicationTest model) {
            super(model);
            __internal.setCharset("UTF-8");
            __internal.setContentType(getContentType());
            __internal.setTemplateName(getTemplateName());
            __internal.setTemplatePackageName(getTemplatePackageName());
            this.project = model.project();
            this.features = model.features();
        }

        @Override
        protected void __doRender() throws IOException, RenderingException {
            // PlainText @ [10:2]
            __internal.aboutToExecutePosInTemplate(10, 2);
            __internal.writeValue(PLAIN_TEXT_0_0);
            // ValueExpression @ [12:9]
            __internal.aboutToExecutePosInTemplate(12, 9);
            __internal.renderValue(project.getGroupName(), false);
            // PlainText @ [12:32]
            __internal.aboutToExecutePosInTemplate(12, 32);
            __internal.writeValue(PLAIN_TEXT_1_0);
            // WithBlockBegin @ [14:1]
            __internal.aboutToExecutePosInTemplate(14, 1);
            com.fizzed.rocker.runtime.WithBlock.with(features.getAllImports(), false, (imports) -> {
                // ForBlockBegin @ [15:5]
                __internal.aboutToExecutePosInTemplate(15, 5);
                try {
                    com.fizzed.rocker.runtime.Java8Iterator.forEach(imports, (pkg) -> {
                        try {
                            // PlainText @ [15:26]
                            __internal.aboutToExecutePosInTemplate(15, 26);
                            __internal.writeValue(PLAIN_TEXT_2_0);
                            // ValueExpression @ [16:8]
                            __internal.aboutToExecutePosInTemplate(16, 8);
                            __internal.renderValue(pkg, false);
                            // PlainText @ [16:12]
                            __internal.aboutToExecutePosInTemplate(16, 12);
                            __internal.writeValue(PLAIN_TEXT_3_0);
                            // ForBlockEnd @ [15:5]
                            __internal.aboutToExecutePosInTemplate(15, 5);
                        } catch (com.fizzed.rocker.runtime.ContinueException e) {
                            // support for continuing for loops
                        }
                    }); // for end @ [15:5]
                } catch (com.fizzed.rocker.runtime.BreakException e) {
                    // support for breaking for loops
                }
                // WithBlockEnd @ [14:1]
                __internal.aboutToExecutePosInTemplate(14, 1);
            }); // with end @ [14:1]
            // PlainText @ [18:2]
            __internal.aboutToExecutePosInTemplate(18, 2);
            __internal.writeValue(PLAIN_TEXT_4_0);
            // ForBlockBegin @ [21:5]
            __internal.aboutToExecutePosInTemplate(21, 5);
            try {
                com.fizzed.rocker.runtime.Java8Iterator.forEach(features, (feature) -> {
                    try {
                        // WithBlockBegin @ [22:9]
                        __internal.aboutToExecutePosInTemplate(22, 9);
                        com.fizzed.rocker.runtime.WithBlock.with(feature.getExtraTestTemplates(), false, (templates) -> {
                            // ForBlockBegin @ [23:13]
                            __internal.aboutToExecutePosInTemplate(23, 13);
                            try {
                                com.fizzed.rocker.runtime.Java8Iterator.forEach(templates, (template) -> {
                                    try {
                                        // IfBlockBegin @ [24:17]
                                        __internal.aboutToExecutePosInTemplate(24, 17);
                                        if (template.getPosition() == CodeTemplate.Position.TEST_FUNCTION) {
                                            // PlainText @ [24:86]
                                            __internal.aboutToExecutePosInTemplate(24, 86);
                                            __internal.writeValue(PLAIN_TEXT_5_0);
                                            // ValueExpression @ [25:5]
                                            __internal.aboutToExecutePosInTemplate(25, 5);
                                            __internal.renderValue(template.getText(), false);
                                            // PlainText @ [25:24]
                                            __internal.aboutToExecutePosInTemplate(25, 24);
                                            __internal.writeValue(PLAIN_TEXT_3_0);
                                            // IfBlockEnd @ [24:17]
                                            __internal.aboutToExecutePosInTemplate(24, 17);
                                        } // if end @ [24:17]
                                        // ForBlockEnd @ [23:13]
                                        __internal.aboutToExecutePosInTemplate(23, 13);
                                    } catch (com.fizzed.rocker.runtime.ContinueException e) {
                                        // support for continuing for loops
                                    }
                                }); // for end @ [23:13]
                            } catch (com.fizzed.rocker.runtime.BreakException e) {
                                // support for breaking for loops
                            }
                            // WithBlockEnd @ [22:9]
                            __internal.aboutToExecutePosInTemplate(22, 9);
                        }); // with end @ [22:9]
                        // ForBlockEnd @ [21:5]
                        __internal.aboutToExecutePosInTemplate(21, 5);
                    } catch (com.fizzed.rocker.runtime.ContinueException e) {
                        // support for continuing for loops
                    }
                }); // for end @ [21:5]
            } catch (com.fizzed.rocker.runtime.BreakException e) {
                // support for breaking for loops
            }
            // PlainText @ [29:6]
            __internal.aboutToExecutePosInTemplate(29, 6);
            __internal.writeValue(PLAIN_TEXT_6_0);
        }
    }

    private static class PlainText {

        static private final String PLAIN_TEXT_0_0 = "package ";
        static private final String PLAIN_TEXT_1_0 = "\n\n";
        static private final String PLAIN_TEXT_2_0 = "import ";
        static private final String PLAIN_TEXT_3_0 = "\n";
        static private final String PLAIN_TEXT_4_0 = "\nclass ApplicationTest {\n";
        static private final String PLAIN_TEXT_5_0 = "    ";
        static private final String PLAIN_TEXT_6_0 = "}";

    }

}
