package application.templates.resources;

import java.io.IOException;
import com.fizzed.rocker.ForIterator;
import com.fizzed.rocker.RenderingException;
import com.fizzed.rocker.RockerContent;
import com.fizzed.rocker.RockerOutput;
import com.fizzed.rocker.runtime.DefaultRockerTemplate;
import com.fizzed.rocker.runtime.PlainTextUnloadedClassLoader;
// import @ [1:1]
import io.ktor.generator.core.Project;

/*
 * Auto generated code to render template application/templates/resources/applicationConf.rocker.raw
 * Do not edit this file. Changes will eventually be overwritten by Rocker parser!
 */
@SuppressWarnings("unused")
public class applicationConf extends com.fizzed.rocker.runtime.DefaultRockerModel {

    static public com.fizzed.rocker.ContentType getContentType() { return com.fizzed.rocker.ContentType.RAW; }
    static public String getTemplateName() { return "applicationConf.rocker.raw"; }
    static public String getTemplatePackageName() { return "application.templates.resources"; }
    static public String getHeaderHash() { return "-1654727492"; }
    static public String[] getArgumentNames() { return new String[] { "project" }; }

    // argument @ [3:2]
    private Project project;

    public applicationConf project(Project project) {
        this.project = project;
        return this;
    }

    public Project project() {
        return this.project;
    }

    static public applicationConf template(Project project) {
        return new applicationConf()
            .project(project);
    }

    @Override
    protected DefaultRockerTemplate buildTemplate() throws RenderingException {
        // optimized for performance (via rocker.optimize flag; no auto reloading)
        return new Template(this);
    }

    static public class Template extends com.fizzed.rocker.runtime.DefaultRockerTemplate {

        // ktor {\n    deployment {\n        port = 8080\n        port = ${?PORT}\n    }\n    application {\n
        static private final byte[] PLAIN_TEXT_0_0;
        //             modules = [ 
        static private final byte[] PLAIN_TEXT_1_0;
        //  ]\n
        static private final byte[] PLAIN_TEXT_2_0;
        //     }\n}\n
        static private final byte[] PLAIN_TEXT_3_0;

        static {
            PlainTextUnloadedClassLoader loader = PlainTextUnloadedClassLoader.tryLoad(applicationConf.class.getClassLoader(), applicationConf.class.getName() + "$PlainText", "UTF-8");
            PLAIN_TEXT_0_0 = loader.tryGet("PLAIN_TEXT_0_0");
            PLAIN_TEXT_1_0 = loader.tryGet("PLAIN_TEXT_1_0");
            PLAIN_TEXT_2_0 = loader.tryGet("PLAIN_TEXT_2_0");
            PLAIN_TEXT_3_0 = loader.tryGet("PLAIN_TEXT_3_0");
        }

        // argument @ [3:2]
        protected final Project project;

        public Template(applicationConf model) {
            super(model);
            __internal.setCharset("UTF-8");
            __internal.setContentType(getContentType());
            __internal.setTemplateName(getTemplateName());
            __internal.setTemplatePackageName(getTemplatePackageName());
            this.project = model.project();
        }

        @Override
        protected void __doRender() throws IOException, RenderingException {
            // PlainText @ [5:2]
            __internal.aboutToExecutePosInTemplate(5, 2);
            __internal.writeValue(PLAIN_TEXT_0_0);
            // WithBlockBegin @ [13:9]
            __internal.aboutToExecutePosInTemplate(13, 9);
            com.fizzed.rocker.runtime.WithBlock.with(project.getGroupName(), false, (groupName) -> {
                // PlainText @ [13:53]
                __internal.aboutToExecutePosInTemplate(13, 53);
                __internal.writeValue(PLAIN_TEXT_1_0);
                // ValueExpression @ [14:25]
                __internal.aboutToExecutePosInTemplate(14, 25);
                __internal.renderValue(raw(groupName), false);
                // ValueExpression @ [14:40]
                __internal.aboutToExecutePosInTemplate(14, 40);
                __internal.renderValue(raw(".ApplicationKt.module"), false);
                // PlainText @ [14:69]
                __internal.aboutToExecutePosInTemplate(14, 69);
                __internal.writeValue(PLAIN_TEXT_2_0);
                // WithBlockEnd @ [13:9]
                __internal.aboutToExecutePosInTemplate(13, 9);
            }); // with end @ [13:9]
            // PlainText @ [15:10]
            __internal.aboutToExecutePosInTemplate(15, 10);
            __internal.writeValue(PLAIN_TEXT_3_0);
        }
    }

    private static class PlainText {

        static private final String PLAIN_TEXT_0_0 = "ktor {\n    deployment {\n        port = 8080\n        port = ${?PORT}\n    }\n    application {\n";
        static private final String PLAIN_TEXT_1_0 = "            modules = [ ";
        static private final String PLAIN_TEXT_2_0 = " ]\n";
        static private final String PLAIN_TEXT_3_0 = "    }\n}\n";

    }

}
