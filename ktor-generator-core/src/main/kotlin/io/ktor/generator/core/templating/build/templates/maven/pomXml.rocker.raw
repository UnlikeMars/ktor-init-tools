@import io.ktor.generator.core.Project
@import io.ktor.generator.core.features.KtorFeature
@import io.ktor.generator.core.features.FeatureInstallReceipt
@import io.ktor.generator.core.features.Features

@args (
    Project project,
    Features features
)

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>@project.getGroupName()</groupId>
    <artifactId>@project.getArtifactId()</artifactId>
    <version>0.0.1</version>
    <name>@project.getName()</name>
    <description>@project.getName()</description>
    <properties>
        <ktor_version>@project.getKtorVersion()</ktor_version>
        <kotlin.code.style>official</kotlin.code.style>
        <kotlin_version>@project.getKotlinVersion()</kotlin_version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <kotlin.compiler.incremental>true</kotlin.compiler.incremental>
        <main.class>@project.getMainClassName()</main.class>
    </properties>
    <repositories>
        @for (feature : features) {
            @with (repos = features.getAllMavenRepositories()) {
                @for (repo: repos) {
        <repository>
            <id>@repo.getId()</id>
            <url>@repo.getUrl()</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
                }
            }
        }
    </repositories>
    <dependencies>
        @with (dependencies = features.getMavenDependencies()) {
            @for (dependency: dependencies) {
                @if (dependency.getVersion() != null) {
        <dependency>
            <groupId>@dependency.getGroup()</groupId>
            <artifactId>@dependency.getArtifact()</artifactId>
            <version>@dependency.getVersion().getMavenFormat()</version>
        </dependency>
                } else {
        <dependency>
            <groupId>@dependency.getGroup()</groupId>
            <artifactId>@dependency.getArtifact()</artifactId>
        </dependency>
                }
            }
        }
        @with (dependencies = features.getTestMavenDependencies()) {
            @for (dependency: dependencies) {
                @if (dependency.getVersion() != null) {
        <dependency>
            <groupId>@dependency.getGroup()</groupId>
            <artifactId>@dependency.getArtifact()</artifactId>
            <version>@dependency.getVersion().getMavenFormat()</version>
            <scope>test</scope>
        </dependency>
                } else {
        <dependency>
            <groupId>@dependency.getGroup()</groupId>
            <artifactId>@dependency.getArtifact()</artifactId>
            <scope>test</scope>
        </dependency>
                }
            }
        }
    </dependencies>
    <build>
        <sourceDirectory>${project.basedir}/src/main</sourceDirectory>
        <testSourceDirectory>${project.basedir}/src/test/kotlin</testSourceDirectory>
        <resources>
            <resource>
                <directory>${project.basedir}/resources/main</directory>
            </resource>
        </resources>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
            </plugin>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>kotlin-maven-plugin</artifactId>
                <groupId>org.jetbrains.kotlin</groupId>
                <version>${kotlin_version}</version>
                <executions>
                    <execution>
                        <id>compile</id>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                        <configuration>
                            <experimentalCoroutines>enable</experimentalCoroutines>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-compile</id>
                        <goals>
                            <goal>test-compile</goal>
                        </goals>
                        <configuration>
                            <experimentalCoroutines>enable</experimentalCoroutines>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.6</version>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <mainClass>${main.class}</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>2.6</version>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                        <configuration>
                            <archive>
                                <manifest>
                                    <mainClass>${main.class}</mainClass>
                                </manifest>
                            </archive>
                            <descriptorRefs>
                                <descriptorRef>jar-with-dependencies</descriptorRef>
                            </descriptorRefs>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            @with (requiredPlugins = features.getAllMavenPlugins()) {
                @for (plugin: requiredPlugins) {
                    @if (plugin.getVersion() != null) {
            <plugin>
                <groupId>@plugin.getGroup()</groupId>
                <artifactId>@plugin.getArtifact()</artifactId>
                <version>@plugin.getVersion()</version>
            </plugin>
                    } else {
            <plugin>
                <groupId>@plugin.getGroup()</groupId>
                <artifactId>@plugin.getArtifact()</artifactId>
            </plugin>
                    }
                }
            }
        </plugins>
    </build>
</project>