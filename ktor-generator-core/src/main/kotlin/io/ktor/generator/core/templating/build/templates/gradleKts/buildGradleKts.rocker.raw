@import io.ktor.generator.core.Project
@import io.ktor.generator.core.features.KtorFeature
@import io.ktor.generator.core.features.FeatureInstallReceipt
@import io.ktor.generator.core.features.Features

@args (
    Project project,
    Features features
)

import org.jetbrains.kotlin.gradle.dsl.Coroutines
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

val ktor_version: String by project
val kotlin_version: String by project

plugins {
    application
    kotlin("jvm") version "@project.getKotlinVersion()"
    @with (requiredPlugins = features.getAllGradlePlugins()) {
        @for (plugin: requiredPlugins) {
            @if (plugin.getVersion() != null) {
                id("@plugin.getId()") version @plugin.getVersion()
            } else {
                id("@plugin.getId()")
            }
        }
    }
}

group = "@project.getGroupName()"
version = "0.0.1"
application {
    mainClassName = "@project.getMainClassName()"
}

repositories {
    @with (repos = features.getAllGradleRepositoryFunctions()) {
        @for (fun: repos) {
    @raw(fun)()
        }
    }
    @with (repos = features.getAllGradleRepositoryUrls()) {
        @for (url: repos) {
    maven { url = uri("@url") }
        }
    }
}

dependencies {
    @with (dependencies = features.getGradleDependencies()) {
        @for (dependency: dependencies) {
            @if (dependency.getVersion() != null) {
    implementation("@dependency.getGroup():@dependency.getArtifact():@dependency.getVersion().getGradleFormat())")
            } else {
    implementation("@dependency.getGroup():@dependency.getArtifact()")
            }
        }
    }
    @with (dependencies = features.getTestGradleDependencies()) {
        @for (dependency: dependencies) {
            @if (dependency.getVersion() != null) {
    testImplementation "@dependency.getGroup():@dependency.getArtifact():@dependency.getVersion().getGradleFormat()"
            } else {
    testImplementation("@dependency.getGroup():@dependency.getArtifact()")
            }
        }
    }
}

kotlin.sourceSets["main"].kotlin.srcDirs("src/main/kotlin")
kotlin.sourceSets["test"].kotlin.srcDirs("src/test/kotlin")

sourceSets["main"].resources.srcDirs("resources/main")
sourceSets["test"].resources.srcDirs("resources/test")